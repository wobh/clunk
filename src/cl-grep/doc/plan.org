#+TITLE: CLUNK! GREP PLAN
#+DATE: <2014-10-25 Sat>
#+AUTHOR: William Clifford
#+EMAIL: wobh@yahoo.com
#+DESCRIPTION: Development plan for Clunk Grep
#+KEYWORDS: common-lisp, experiment
#+LANGUAGE:  en
#+OPTIONS:   H:6 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* features [4/6]
** DONE search file for pattern 					:MVP:
~cl-grep pattern file~

#+BEGIN_EXAMPLE
$ cl-grep grep README.org

CLUNK! Grep is a CL learning project implementing a primitive grep
(fgrep) program.
#+END_EXAMPLE

** DONE use standard input						:MVP:
If no file arguments are specified, the standard input is used.
** DONE use error stream						:MVP:
- print help message when no arguments are passed in
** DONE set exit status 						:MVP:
#+BEGIN_QUOTE
EXIT STATUS
     The grep utility exits with one of the following values:

     0     One or more lines were selected.
     1     No lines were selected.
     >1    An error occurred.
#+END_QUOTE

1. exit-status
2. catch errors
3. set exit status >2

** TODO setup settings struct
1. =(defparameter *settings* (make-settings))= create settings struct
2. set any options that may be defined by environment variables
   - =(setf (home *settings*) +clisp (EXT:GETENV "HOME"))=
3. =(defparameter *args* +clisp (ext:*args))= get args
5. identify options in =*args*=
   - shortopt simple flag starts with "-" followed by one letter
   - shortopt list of flags starts with "-" followed by letters
   - shortopt parameter 
     + starts with "-" followed one letter
     + followed by " " (space) or "="
     + followed by argument
     + may not be in list
   - longopt flag starts with "--" followed by a word or hyphen separated words
   - longopt parameter 
     + starts with "--"
     + followed by word or hyphen separated words
     + followed by " " (space) or "="
     + followed by argument
6. set any of these in =*settings*= overwrite environment settings
7. identify arguments of positional parameters in =*args*=
   - must follow options
   - first string that:
     - does not start with "-" or "--"
     - does not follow a optional parameter
     - or all strings following a string "--"

*** tests
#+BEGIN_SRC lisp
  (labels ((optp (str)
             (or (and (>= (length str) 2)
                      (char=  #\- (schar str 0))
                      (char/= #\- (schar str 1)))
                 (and (> (length str) 2)
                      (char=  #\- (schar str 0))
                      (char=  #\- (schar str 0))
                      (char/= #\- (schar str 1)))))
           )
    (let ((*args* (list "--help"))
          (result nil))
      (dolist (opt *args*)
        (assert (equal (optp opt) t) (list result) "not an opt ~S" opt))))
#+END_SRC

*** references
- http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html

** TODO [13/40] options
*** DONE --help
Print a brief help message.

- out :: *error-output*
- status :: 2

#+BEGIN_EXAMPLE
usage: fgrep [-abcDEFGHhIiJLlmnOoPqRSsUVvwxZ] [-A num] [-B num] [-C[num]]
[-e pattern] [-f file] [--binary-files=value] [--color=when]
[--context[=num]] [--directories=action] [--label] [--line-buffered]
[--null] [pattern] [file ...]
#+END_EXAMPLE

*** DONE -V, --version
Display version information and exit.

*** DONE -s, --no-messages
Silent mode. Nonexistent and unreadable files are ignored (i.e. their
error messages are suppressed).

*** DONE -H
Always print filename headers with output lines.

*** DONE -h, --no-filename
Never print filename headers (i.e. filenames) with output lines.

*** DONE -c, --count
Only a count of selected lines is written to standard output.

*** DONE -m num, --max-count=num
Stop reading the file after num matches.

*** DONE -v, --invert-match
Selected lines are those not matching any of the specified patterns.
*** DONE -i, --ignore-case
Perform case insensitive matching. By default, grep is case sensitive.

*** DONE -o, --only-matching
Prints only the matching part of the lines.
*** DONE -e pattern, --regexp=pattern
Specify a pattern used during the search of the input: an input line
is selected if it matches any of the specified patterns. This option
is most useful when multiple -e options are used to specify multiple
patterns, or when a pattern begins with a dash (`-').

*** DONE -q, --quiet, --silent
Quiet mode: suppress normal output. `grep' will only search a file
until a match has been found, making searches potentially less
expensive.

*** DONE -f file, --file=file
Read one or more newline separated patterns from file.  Empty pattern
lines match every input line.  Newlines are not considered part of a
pattern. If file is empty, nothing is matched.

*** TODO -x, --line-regexp
Only input lines selected against an entire fixed string or regular
expression are considered to be matching lines.

*** TODO -n, --line-number
Each output line is preceded by its relative line number in the file,
starting at line 1. The line number counter is reset for each file
processed. This option is ignored if -c, -L, -l, or -q is specified.

*** TODO -b, --byte-offset
The offset in bytes of a matched pattern is displayed in front of the
respective matched line.

*** TODO -A num, --after-context=num
Print num lines of trailing context after each match. See also the -B
and -C options.

*** TODO -B num, --before-context=num
Print num lines of leading context before each match. See also the -A
and -C options.

*** TODO -C[num, --context=num]
Print num lines of leading and trailing context surrounding each
match. The default is 2 and is equivalent to -A 2 -B 2. Note: no
whitespace may be given between the option and its argument.

*** TODO --context[=num]
Print num lines of leading and trailing context. The default is 2.

*** TODO -a, --text
Treat all files as ASCII text. Normally grep will simply print
``Binary file ... matches'' if files contain binary characters. Use of
this option forces grep to output lines matching the specified
pattern.
 
*** TODO -D action, --devices=action
Specify the demanded action for devices, FIFOs and sockets. The
default action is `read', which means, that they are read as if they
were normal files. If the action is set to `skip', devices will be
silently skipped.

*** TODO -d action, --directories=action
Specify the demanded action for directories. It is `read' by default,
which means that the directories are read in the same manner as normal
files. Other possible values are `skip' to silently ignore the
directories, and `recurse' to read them recursively, which has the
same effect as the -R and -r option.

*** TODO --exclude
If specified, it excludes files matching the given filename pattern
from the search. Note that --exclude patterns take priority over
--include patterns, and if no --include pattern is specified, all
files are searched that are not excluded. Patterns are matched to the
full path specified, not only to the filename component.

*** TODO --exclude-dir
If -R is specified, it excludes directories matching the given
filename pattern from the search. Note that --exclude-dir patterns
take priority over --include-dir patterns, and if no --include-dir
pattern is specified, all directories are searched that are not
excluded.

*** TODO -F, --fixed-strings
Interpret pattern as a set of fixed strings (i.e. force grep to behave
as fgrep).

*** TODO -I
Ignore binary files.  This option is equivalent to
--binary-file=without-match option.

*** TODO -U, --binary
Search binary files, but do not attempt to print them.

*** TODO --include
If specified, only files matching the given filename pattern are
searched. Note that --exclude patterns take priority over --include
patterns. Patterns are matched to the full path specified, not only to
the filename component.

*** TODO --include-dir
If -R is specified, only directories matching the given filename
pattern are searched. Note that --exclude-dir patterns take priority
over --include-dir patterns.

*** TODO -L, --files-without-match
Only the names of files not containing selected lines are written to
standard output. Pathnames are listed once per file searched. If the
standard input is searched, the string ``(standard input)'' is
written.

*** TODO -l, --files-with-matches
Only the names of files containing selected lines are written to
standard output. `grep' will only search a file until a match has been
found, making searches potentially less expensive. Pathnames are
listed once per file searched. If the standard input is searched, the
string ``(standard input)'' is written.

*** TODO --null
Prints a zero-byte after the file name.

*** TODO -O
If -R is specified, follow symbolic links only if they were explicitly
listed on the command line. The default is not to follow symbolic
links.

*** TODO -p
If -R is specified, no symbolic links are followed. This is the default.

*** TODO -R, -r, --recursive
Recursively search subdirectories listed.

*** TODO -S
If -R is specified, all symbolic links are followed. The default is
not to follow symbolic links.

*** TODO -y
Equivalent to -i. Obsoleted.

*** TODO --binary-files=value
Controls searching and printing of binary files. Options are binary,
the default: search binary files but do not print them; without-match:
do not search binary files; and text: treat all files as text.

*** TODO --line-buffered
Force output to be line buffered. By default, output is line buffered
when standard output is a terminal and block buffered otherwise.

* TODO Tests
  :PROPERTIES:
  :header-args: :tangle-mode (identity #o700) :noweb yes :padline no :mkdirp yes
  :END:
** TODO [0/4] unit
*** TODO =write-match= text
#+BEGIN_SRC lisp
  (let* ((outstr (make-string-output-stream))
         (*standard-output* outstr)
         (subject "foo bar baz qux")
         (expects (format (mesg-match *messages*) subject)))
    (write-match subject)
    (equal expects (get-output-stream-string outstr)))
#+END_SRC
*** TODO =seek-pattern= pattern text
#+BEGIN_SRC lisp
  (let ((control "foo bar baz qux"))
    (labels ((write-match (text) text))
      (let ((subject "bar")
            (expects control))
        (equal expects (seek-pattern subject control)))
      (let ((subject "zot")
            (expects nil))
        (equal expects (seek-pattern subject control)))))
#+END_SRC
*** TODO =scan-stream= stream pattern
#+BEGIN_SRC lisp
  (let ((control-stream (make-string-input-stream "foo\nbar\nbaz\nqux\n"))
        (control-pattern "zot")
        (subject 0)
        (expects 4))
    (labels ((seek-pattern (pattern line)
               (declare 'ignorable pattern line)
               (incf subject)))
      (scan-stream control-pattern control-stream)
      (= expects subject)))
#+END_SRC
*** TODO =get-opts= *args*
**** TODO short "-x"
#+BEGIN_SRC lisp
  (let ((config )))
#+END_SRC
**** TODO short concatenated "-xyz"
**** TODO short=value forms "-x value" "-x=value"
**** TODO long "--foo"
**** TODO long=value "--foo value" "--foo=value"
**** TODO end opts  "[opts] args"  "[opts] -- args"

** TODO Fixtures [0/2]
*** TODO names
#+HEADER: :tangle (tangle-done "foo.txt" "../lib/fixtures")
#+BEGIN_SRC text
  foo
  bar
  baz
  qux
#+END_SRC
** TODO test forms
