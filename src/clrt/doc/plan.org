#+TITLE:     CLUNK! CLRT development plan
#+AUTHOR:    William Clifford
#+EMAIL:     wobh@yahoo.com
#+DATE:      2014-10-26 Sun
#+DESCRIPTION: development plan for CLRT
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

* Introduction

Reference ERT implementation available at [[../src/ert.el]]

A few important differences to note:

1) won't have to prefix functions with "ert-"
2) won't be able to use emacs buffer types 
3) will be able to use cl conditions
4) will have to forgo much of the external emacs interface for now.

I will probably implement things I later find were unnecessary. I
expect to discover that I have to implement things I don't find in the
ERT reference source.

* Planning
** basic expectations
*** should
#+BEGIN_SRC lisp
  (defmacro should (&body body)
    (let ((var (gensym))
          (err (gensym)))
      `(multiple-value-bind (,var ,err)
           (ignore-errors
             (assert ,body))
         (if ,err
             (signal clrt:fail ,err)
             (signal clrt:pass ,var)))))
#+END_SRC
*** should-not
#+BEGIN_SRC lisp
  (defmacro should-not (&body body)
    `(should (not ,body)))
#+END_SRC
*** should-error
#+BEGIN_SRC lisp
  (defmacro should-error ((exp-err) &body body)
    (let ((err (gensym)))
      `(handler-case
           (progn
             ,@body
             (signal clrt:fail ,err))
         (serious-error (,err)
           (signal clrt:pass ,err)))))
#+END_SRC
** test outcomes
*** passed, expectation met
#+BEGIN_SRC lisp
  (define-condition clrt:pass ()
    )
#+END_SRC
*** failed, expectation unmet
#+BEGIN_SRC lisp
  (define-condition clrt:fail ()
    )
#+END_SRC
*** unexepected error
#+BEGIN_SRC lisp
  (labels ((subject (str) nil))
    (let ((controls (list "foo" "bar" "baz" "qux"))
          (outcomes '())
          (forecast t))
      (dolist (ctrl controls outcomes)
        (handler-case
            (progn
              (assert (eq (subject ctrl) forecast) (ctrl) "fail ~S" ctrl)
              (push ctrl outcomes))
          (simple-error (err)
            (push err outcomes))))))
#+END_SRC

#+BEGIN_SRC lisp
  (labels ((subject (str) nil))
    (let ((controls (list "foo" "bar" "baz" "qux"))
          (outcomes '())
          (forecast t))
      (dolist (ctrl controls outcomes)
        (handler-case
            (progn
              (assert (eq (subject ctrl) forecast) (ctrl) "fail ~S" ctrl)
              (push ctrl outcomes))
          (simple-error (err)
            (push err outcomes))))))
#+END_SRC



(labels ((optp (str)
                    nil))
           (let ((*args* (list "--help"))
                 (result '()))
             (dolist (opt *args* result)
               (handler-case
                   (assert (eq (optp opt) t) (opt) "Not an opt ~S"
                   opt)
                 (simple-error (err)

* Features [0/6]

** TODO define ~CLRT~ package

** TODO =test= structure

#+BEGIN_SRC lisp
  (defstruct test
    "The data structure that represents a test case."
    (name nil)
    (documentation nil)
    (body (assert nil))
    (most-recent-result nil)
    (expected-result-type :passed)
    (tags '()))
#+END_SRC

** TODO =deftest=

*** TODO =should=

*** TODO =should-not=

*** TODO =should-error=

** TODO =run-tests-interactively=

** TODO =run-tests-batch=

** TODO =run-tests-batch-and-exit=

* Other testing packages

** reviews of Common Lisp testing packages:
- http://aperiodic.net/phil/archives/Geekery/notes-on-lisp-testing-frameworks.html

** CL testing packages that seem cool
- http://common-lisp.net/project/fiveam/
- http://dwim.hu/live/hu.dwim.stefil/
-
  http://www.cs.northwestern.edu/academics/courses/325/readings/lisp-unit.html

** non-CL testing software that might be useful

- https://github.com/seattlerb/minitest
